{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\K\\\\source\\\\bug-ranger\\\\src\\\\components\\\\Charts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Charts = ({\n  issues\n}) => {\n  _s();\n  const [severityCounts, setSeverityCounts] = useState({});\n  useEffect(() => {\n    // Function to calculate the severity counts\n    const calculateSeverityCounts = issues => {\n      const counts = {};\n      issues.forEach(issue => {\n        const severity = issue.severity;\n        if (severity) {\n          if (counts[severity]) {\n            counts[severity]++;\n          } else {\n            counts[severity] = 1;\n          }\n        }\n      });\n      return counts;\n    };\n\n    // Calculate the severity counts when issues prop changes\n    const counts = calculateSeverityCounts(issues);\n\n    // Update the severity counts state\n    setSeverityCounts(counts);\n\n    // Log the severity counts (optional)\n    console.log(counts);\n\n    // You can use severityCounts in your charts here\n  }, [issues]);\n\n  // const Charts = ({ issues }) => {\n  //   useEffect(() => {\n  //     // Function to calculate the severity counts\n  //     const calculateSeverityCounts = (issues) => {\n  //       const severityCounts = {};\n\n  //       issues.forEach((issue) => {\n  //         const severity = issue.severity;\n  //         if (severity) {\n  //           if (severityCounts[severity]) {\n  //             severityCounts[severity]++;\n  //           } else {\n  //             severityCounts[severity] = 1;\n  //           }\n  //         }\n  //       });\n\n  //       return severityCounts;\n  //     };\n\n  //     // Calculate the severity counts when issues prop changes\n  //     const severityCounts = calculateSeverityCounts(issues);\n\n  //     // Log the severity counts\n  //     console.log(severityCounts);\n\n  //     // You can use severityCounts in your charts here\n  //   }, [issues]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Severity Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Charts, \"6B9Vihp1GNiQhrnB/+PiDwBXYko=\");\n_c = Charts;\nexport default Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Pie","jsxDEV","_jsxDEV","Charts","issues","_s","severityCounts","setSeverityCounts","calculateSeverityCounts","counts","forEach","issue","severity","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/K/source/bug-ranger/src/components/Charts.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst Charts = ({ issues }) => {\r\n  \r\n  const [severityCounts, setSeverityCounts] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Function to calculate the severity counts\r\n    const calculateSeverityCounts = (issues) => {\r\n      const counts = {};\r\n      issues.forEach((issue) => {\r\n        const severity = issue.severity;\r\n        if (severity) {\r\n          if (counts[severity]) {\r\n            counts[severity]++;\r\n          } else {\r\n            counts[severity] = 1;\r\n          }\r\n        }\r\n      });\r\n      return counts;\r\n    };\r\n\r\n    // Calculate the severity counts when issues prop changes\r\n    const counts = calculateSeverityCounts(issues);\r\n\r\n    // Update the severity counts state\r\n    setSeverityCounts(counts);\r\n\r\n    // Log the severity counts (optional)\r\n    console.log(counts);\r\n\r\n    // You can use severityCounts in your charts here\r\n  }, [issues]);\r\n\r\n  \r\n  // const Charts = ({ issues }) => {\r\n  //   useEffect(() => {\r\n  //     // Function to calculate the severity counts\r\n  //     const calculateSeverityCounts = (issues) => {\r\n  //       const severityCounts = {};\r\n        \r\n  //       issues.forEach((issue) => {\r\n  //         const severity = issue.severity;\r\n  //         if (severity) {\r\n  //           if (severityCounts[severity]) {\r\n  //             severityCounts[severity]++;\r\n  //           } else {\r\n  //             severityCounts[severity] = 1;\r\n  //           }\r\n  //         }\r\n  //       });\r\n  \r\n  //       return severityCounts;\r\n  //     };\r\n  \r\n  //     // Calculate the severity counts when issues prop changes\r\n  //     const severityCounts = calculateSeverityCounts(issues);\r\n  \r\n  //     // Log the severity counts\r\n  //     console.log(severityCounts);\r\n  \r\n  //     // You can use severityCounts in your charts here\r\n  //   }, [issues]);\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Severity Chart</h2>\r\n        {/* {value && <Pie data={value} ref={severityChartRef} />} */}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,UAAU;AACjB,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAE7B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExDF,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,uBAAuB,GAAIJ,MAAM,IAAK;MAC1C,MAAMK,MAAM,GAAG,CAAC,CAAC;MACjBL,MAAM,CAACM,OAAO,CAAEC,KAAK,IAAK;QACxB,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;QAC/B,IAAIA,QAAQ,EAAE;UACZ,IAAIH,MAAM,CAACG,QAAQ,CAAC,EAAE;YACpBH,MAAM,CAACG,QAAQ,CAAC,EAAE;UACpB,CAAC,MAAM;YACLH,MAAM,CAACG,QAAQ,CAAC,GAAG,CAAC;UACtB;QACF;MACF,CAAC,CAAC;MACF,OAAOH,MAAM;IACf,CAAC;;IAED;IACA,MAAMA,MAAM,GAAGD,uBAAuB,CAACJ,MAAM,CAAC;;IAE9C;IACAG,iBAAiB,CAACE,MAAM,CAAC;;IAEzB;IACAI,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;;IAEnB;EACF,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;;EAGZ;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAMA,oBACEF,OAAA;IAAAa,QAAA,eACEb,OAAA;MAAAa,QAAA,eACEb,OAAA;QAAAa,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CA5EIF,MAAM;AAAAiB,EAAA,GAANjB,MAAM;AA8EZ,eAAeA,MAAM;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}