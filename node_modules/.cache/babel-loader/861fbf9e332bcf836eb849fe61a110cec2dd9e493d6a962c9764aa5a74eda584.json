{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\K\\\\source\\\\bug-ranger\\\\src\\\\components\\\\Charts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'chart.js/auto'; // Import 'chart.js/auto' to ensure proper initialization\nimport { Chart as ChartJS } from \"chart.js/auto\";\nimport { Pie } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Charts = ({\n  issues\n}) => {\n  _s();\n  const [severityCounts, setSeverityCounts] = useState({\n    labels: issues.map(issue => issue.severity),\n    datasets: [{\n      label: \"Users Gained\",\n      data: counts\n    }]\n  });\n\n  // const chartRef = useRef(null); // Reference to the chart instance\n  // let countKey = Object.keys(counts)\n  // let countValue = Object.keys(counts)\n  const calculateSeverityCounts = issues => {\n    const counts = {};\n    issues.forEach(issue => {\n      const severity = issue.severity;\n      if (severity) {\n        if (counts[severity]) {\n          counts[severity]++;\n        } else {\n          counts[severity] = 1;\n        }\n      }\n    });\n    return counts;\n  };\n\n  // useEffect(() => {\n  //   // Function to calculate the severity counts\n\n  // }, [issues]);\n\n  const counts = calculateSeverityCounts(issues);\n  // setSeverityCounts(counts);\n  console.log(counts);\n  console.log(severityCounts);\n  // console.log(countKey)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Charts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Charts, \"oLRDmrLn11gWVEqjPLppC5d+aA8=\");\n_c = Charts;\nexport default Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","ChartJS","Pie","jsxDEV","_jsxDEV","Charts","issues","_s","severityCounts","setSeverityCounts","labels","map","issue","severity","datasets","label","data","counts","calculateSeverityCounts","forEach","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/K/source/bug-ranger/src/components/Charts.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport 'chart.js/auto'; // Import 'chart.js/auto' to ensure proper initialization\r\nimport { Chart as ChartJS } from \"chart.js/auto\";\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst Charts = ({ issues }) => {\r\n  const [severityCounts, setSeverityCounts] = useState({\r\n\r\n    labels: issues.map(issue => issue.severity),\r\n    datasets: [\r\n      {\r\n        label: \"Users Gained\",\r\n        data: counts\r\n      },\r\n    ],\r\n  });\r\n\r\n  // const chartRef = useRef(null); // Reference to the chart instance\r\n  // let countKey = Object.keys(counts)\r\n  // let countValue = Object.keys(counts)\r\n  const calculateSeverityCounts = (issues) => {\r\n    const counts = {};\r\n    issues.forEach((issue) => {\r\n      const severity = issue.severity;\r\n      if (severity) {\r\n        if (counts[severity]) {\r\n          counts[severity]++;\r\n        } else {\r\n          counts[severity] = 1;\r\n        }\r\n      }\r\n    });\r\n    return counts;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // Function to calculate the severity counts\r\n    \r\n  // }, [issues]);\r\n  \r\n  const counts = calculateSeverityCounts(issues);\r\n  // setSeverityCounts(counts);\r\n  console.log(counts);\r\n  console.log(severityCounts)\r\n  // console.log(countKey)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Charts</h2>\r\n        {/* <Pie data={data}/> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,eAAe,CAAC,CAAC;AACxB,SAASC,KAAK,IAAIC,OAAO,QAAQ,eAAe;AAChD,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC;IAEnDW,MAAM,EAAEJ,MAAM,CAACK,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;IAC3CC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,cAAc;MACrBC,IAAI,EAAEC;IACR,CAAC;EAEL,CAAC,CAAC;;EAEF;EACA;EACA;EACA,MAAMC,uBAAuB,GAAIZ,MAAM,IAAK;IAC1C,MAAMW,MAAM,GAAG,CAAC,CAAC;IACjBX,MAAM,CAACa,OAAO,CAAEP,KAAK,IAAK;MACxB,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;MAC/B,IAAIA,QAAQ,EAAE;QACZ,IAAII,MAAM,CAACJ,QAAQ,CAAC,EAAE;UACpBI,MAAM,CAACJ,QAAQ,CAAC,EAAE;QACpB,CAAC,MAAM;UACLI,MAAM,CAACJ,QAAQ,CAAC,GAAG,CAAC;QACtB;MACF;IACF,CAAC,CAAC;IACF,OAAOI,MAAM;EACf,CAAC;;EAED;EACA;;EAEA;;EAEA,MAAMA,MAAM,GAAGC,uBAAuB,CAACZ,MAAM,CAAC;EAC9C;EACAc,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;EACnBG,OAAO,CAACC,GAAG,CAACb,cAAc,CAAC;EAC3B;;EAGA,oBACEJ,OAAA;IAAAkB,QAAA,eACElB,OAAA;MAAAkB,QAAA,eACElB,OAAA;QAAAkB,QAAA,EAAI;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEZ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnB,EAAA,CAlDIF,MAAM;AAAAsB,EAAA,GAANtB,MAAM;AAoDZ,eAAeA,MAAM;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}