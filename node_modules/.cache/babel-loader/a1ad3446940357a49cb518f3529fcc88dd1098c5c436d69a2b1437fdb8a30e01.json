{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\K\\\\source\\\\bug-ranger\\\\src\\\\components\\\\Charts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'chart.js/auto'; // Import 'chart.js/auto' to ensure proper initialization\nimport { Pie } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Charts = ({\n  issues\n}) => {\n  _s();\n  const [severityCounts, setSeverityCounts] = useState({});\n  const chartRef = useRef(null); // Reference to the chart instance\n\n  useEffect(() => {\n    // Function to calculate the severity counts\n    const calculateSeverityCounts = issues => {\n      const counts = {};\n      issues.forEach(issue => {\n        const severity = issue.severity;\n        if (severity) {\n          if (counts[severity]) {\n            counts[severity]++;\n          } else {\n            counts[severity] = 1;\n          }\n        }\n      });\n      return counts;\n    };\n\n    // Calculate the severity counts when issues prop changes\n    const counts = calculateSeverityCounts(issues);\n\n    // // Destroy the previous chart if it exists\n    // if (chartRef.current) {\n    //   chartRef.current.destroy();\n    // }\n\n    // Update the severity counts state\n    setSeverityCounts(counts);\n\n    // Log the severity counts (optional)\n    console.log(counts);\n\n    // Create a new chart instance\n    // const ctx = document.getElementById('severityChart');\n    // const newChart = new window.Chart(ctx, {\n    //   type: 'pie',\n    //   data: {\n    //     labels: Object.keys(counts),\n    //     datasets: [\n    //       {\n    //         data: Object.values(counts),\n    //         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n    //         hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\n    //       },\n    //     ],\n    //   },\n    // });\n\n    // Store the new chart instance in the ref\n    // chartRef.current = newChart;\n  }, [issues]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Charts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"severityChart\",\n        width: \"400\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Charts, \"w/9VPKQ2JAJhqO353rhEwvJXEBE=\");\n_c = Charts;\nexport default Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Pie","jsxDEV","_jsxDEV","Charts","issues","_s","severityCounts","setSeverityCounts","chartRef","calculateSeverityCounts","counts","forEach","issue","severity","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["C:/Users/K/source/bug-ranger/src/components/Charts.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport 'chart.js/auto'; // Import 'chart.js/auto' to ensure proper initialization\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst Charts = ({ issues }) => {\r\n  const [severityCounts, setSeverityCounts] = useState({});\r\n  const chartRef = useRef(null); // Reference to the chart instance\r\n\r\n  useEffect(() => {\r\n    // Function to calculate the severity counts\r\n    const calculateSeverityCounts = (issues) => {\r\n      const counts = {};\r\n      issues.forEach((issue) => {\r\n        const severity = issue.severity;\r\n        if (severity) {\r\n          if (counts[severity]) {\r\n            counts[severity]++;\r\n          } else {\r\n            counts[severity] = 1;\r\n          }\r\n        }\r\n      });\r\n      return counts;\r\n    };\r\n\r\n    // Calculate the severity counts when issues prop changes\r\n    const counts = calculateSeverityCounts(issues);\r\n\r\n    // // Destroy the previous chart if it exists\r\n    // if (chartRef.current) {\r\n    //   chartRef.current.destroy();\r\n    // }\r\n\r\n    // Update the severity counts state\r\n    setSeverityCounts(counts);\r\n\r\n    // Log the severity counts (optional)\r\n    console.log(counts);\r\n\r\n    // Create a new chart instance\r\n    // const ctx = document.getElementById('severityChart');\r\n    // const newChart = new window.Chart(ctx, {\r\n    //   type: 'pie',\r\n    //   data: {\r\n    //     labels: Object.keys(counts),\r\n    //     datasets: [\r\n    //       {\r\n    //         data: Object.values(counts),\r\n    //         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\r\n    //         hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],\r\n    //       },\r\n    //     ],\r\n    //   },\r\n    // });\r\n\r\n    // Store the new chart instance in the ref\r\n    // chartRef.current = newChart;\r\n\r\n  }, [issues]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Charts</h2>\r\n        <canvas id=\"severityChart\" width=\"400\" height=\"400\"></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,eAAe,CAAC,CAAC;AACxB,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAMS,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,uBAAuB,GAAIL,MAAM,IAAK;MAC1C,MAAMM,MAAM,GAAG,CAAC,CAAC;MACjBN,MAAM,CAACO,OAAO,CAAEC,KAAK,IAAK;QACxB,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;QAC/B,IAAIA,QAAQ,EAAE;UACZ,IAAIH,MAAM,CAACG,QAAQ,CAAC,EAAE;YACpBH,MAAM,CAACG,QAAQ,CAAC,EAAE;UACpB,CAAC,MAAM;YACLH,MAAM,CAACG,QAAQ,CAAC,GAAG,CAAC;UACtB;QACF;MACF,CAAC,CAAC;MACF,OAAOH,MAAM;IACf,CAAC;;IAED;IACA,MAAMA,MAAM,GAAGD,uBAAuB,CAACL,MAAM,CAAC;;IAE9C;IACA;IACA;IACA;;IAEA;IACAG,iBAAiB,CAACG,MAAM,CAAC;;IAEzB;IACAI,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;;IAEnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;EAEF,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,oBACEF,OAAA;IAAAc,QAAA,eACEd,OAAA;MAAAc,QAAA,gBACEd,OAAA;QAAAc,QAAA,EAAI;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACflB,OAAA;QAAQmB,EAAE,EAAC,eAAe;QAACC,KAAK,EAAC,KAAK;QAACC,MAAM,EAAC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACf,EAAA,CAhEIF,MAAM;AAAAqB,EAAA,GAANrB,MAAM;AAkEZ,eAAeA,MAAM;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}